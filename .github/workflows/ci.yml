
name: CI

on:
  push:
    branches:
      - main
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

env:
  CARGO_TERM_COLOR: always
  FROM_REF: ${{ github.event.pull_request.base.sha || (!github.event.forced && ( github.event.before != '0000000000000000000000000000000000000000'  && github.event.before || github.sha )) || format('{0}~', github.sha) }}
  TO_REF: ${{ github.sha }}

jobs:
  test:
    name: Test for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: false
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Install linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt update && sudo apt install build-essential libssl-dev pkg-config libglib2.0-dev libgtk-3-dev
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Install pre-commit
        run: python -m pip install pre-commit
      - run: python -m pip freeze --local
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-3|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - name: pre-commit validation
        run: pre-commit run --show-diff-on-failure --color=always --from-ref ${{ env.FROM_REF }} --to-ref ${{ env.TO_REF }} --hook-stage manual
      - name: Formatting
        uses: clechasseur/rs-cargo@v2
        with:
          command: fmt
          args: --check
      - name: Check
        uses: clechasseur/rs-cargo@v2
        with:
          command: check
          args: --all-targets --all-features --locked
      - name: Linting
        uses: clechasseur/rs-cargo@v2
        with:
          command: clippy
          args: --all-targets --all-features --locked -- -D warnings
      - run: cargo clippy --all-targets --all-features --locked --message-format=json -- -D warnings  3>&1 2>&1 | tee clippy-${{ matrix.os }}.json
      - uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.os }}
          path: clippy-${{ matrix.os }}.json
          retention-days: 7

      - name: Tests
        run: cargo test

  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    needs: test
    if: success() || failure()
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          persist-credentials: false

      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-sonar
      - name: Download clippy and artifact reports
        uses: actions/download-artifact@v4
        id: download
        with:
          path: clippy-reports
          pattern: report-*
          merge-multiple: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: convert clippy reports
        run: |
          mkdir reports
          for file in clippy-reports/*; do cargo sonar --clippy --clippy-path $file --sonar-path reports/$(basename $file); done
      - name: list converted files
        id: files
        run: echo "reports=$(find reports -name "*.json" | paste -s -d ',' - )" >> $GITHUB_OUTPUT
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectBaseDir=.
            -Dsonar.externalIssuesReportPaths=${{ steps.files.outputs.reports }}
